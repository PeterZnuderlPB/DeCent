import re 
import requests
import json

from datetime import timedelta
from django.utils import timezone
#from django.contrib.auth.models import User
from django.conf import settings
from oauth2_provider.models import AccessToken, RefreshToken
from oauth2_provider.oauth2_validators import OAuth2Validator
from oauth2_provider.settings import oauth2_settings

def generate_github_access_token(github_client_id, github_client_secret,github_code):
    """
    create an access token to github Oauth2.
    :param github_client_id: client_id from https://github.com/settings/developers
    :param github_client_secret: client_secret from https://github.com/settings/developers
    :param code: code generated by client from http://github.com/login/oauth/authorize/
    :return: json data on user's api
    """
    auth_response = requests.post(
    'https://github.com/login/oauth/access_token/',
    data=json.dumps({
    'client_id': github_client_id,
    'client_secret': github_client_secret,
    'code': github_code
    }),
    headers={'content-type': 'application/json'}
    )
    token= re.search(r"access_token=([a-zA-Z0-9]+)", auth_response.content.decode('utf-8'))
    if token is None:
        raise PermissionError(auth_response)
    return token.group(1)

def convert_to_auth_token(client_id, client_secret, backend, token):
    """
    given a previously generated access_token use the django-rest-framework-social-oauth2
    endpoint `/convert-token/` to authenticate the user and return a django auth token
    :param client_id: from OauthToolkit application
    :param client_secret: from OauthToolkit application
    :param backend: authentication backend to user ('github', 'facebook', etc)
    :param token: access token generated from the backend - github
    :return: django auth token
    """
    params = {
    'grant_type': 'convert_token',
    'client_id': client_id,
    'client_secret': client_secret,
    'backend': backend,
    'token': token,
    }
    response = requests.post('http://127.0.0.1:8000/auth/convert-token/', params=params)
    return response.json()

def get_user_from_token(django_auth_token):
    """
    Retrieve the user object given an access token
    :param django_auth_token: Oauthtoolkit access TOKEN
    :return: user object
    """
    return settings.AUTH_USER_MODEL.objects.get(
    id=AccessToken.objects.get(token=django_auth_token['access_token']).user_id)

class CustomOAuth2Validator(OAuth2Validator):

    def save_bearer_token(self, token, request, *args, **kwargs):
        """
        It's messy. It is 90% code from parent function. I didn't find a way to reduce it.
        I tried and I failed :'(
        Sin Count += 1
        Save access and refresh token, If refresh token is issued, remove old refresh tokens as
        in rfc:`6`
        """
        if request.refresh_token:
            # remove used refresh token
            # Copied as is from parent. I don't know why they're even caring to delete this! - Dheerendra
            try:
                RefreshToken.objects.get(token=request.refresh_token).revoke()
            except RefreshToken.DoesNotExist:
                assert ()  # TODO though being here would be very strange, at least log the error

        expires = timezone.now() + timedelta(seconds=oauth2_settings.ACCESS_TOKEN_EXPIRE_SECONDS)
        token['expires_in'] = oauth2_settings.ACCESS_TOKEN_EXPIRE_SECONDS

        if request.response_type == 'token':
            expires = timezone.now() + timedelta(seconds=settings.IMPLICIT_ACCESS_TOKEN_EXPIRES_SECONDS)
            token['expires_in'] = settings.IMPLICIT_ACCESS_TOKEN_EXPIRES_SECONDS

        if request.grant_type == 'client_credentials':
            request.user = None

        access_token = AccessToken(
            user=request.user,
            scope=token['scope'],
            expires=expires,
            token=token['access_token'],
            application=request.client)
        access_token.save()

        if 'refresh_token' in token:
            refresh_token = RefreshToken(
                user=request.user,
                token=token['refresh_token'],
                application=request.client,
            )
            if request.grant_type == 'authorization_code':
                refresh_tokens = RefreshToken.objects.all().filter(user=request.user,
                                                                   application=request.client).order_by('-id')
                if len(refresh_tokens) > 0:
                    refresh_token = refresh_tokens[0]
                    # Delete the old access_token
                    refresh_token.access_token.delete()
                    if len(refresh_tokens) > 1:
                        # Enforce 1 token pair. Delete all old refresh_tokens
                        RefreshToken.objects.exclude(pk=refresh_token.id).delete()

            refresh_token.access_token = access_token
            refresh_token.save()
            token['refresh_token'] = refresh_token.token
            token['groups'] = request.user.groups
